[generator]
# Claude CLI configuration for commit message generation
command = "claude"
# Claude CLI arguments
args = ["--model", "sonnet", "--print"]
# Fallback message if generation fails
default_commit_message = "WARNING: commit message generation failure"

[prompt]
# A prompt template for generating commit messages that will be added after the args above
# Variables to be replaced at run time: {language}, {diff_content}
template = """
Generate a Git commit message in {language}, following the Conventional Commits specification. OUTPUT ONLY THE COMMIT MESSAGE, NO EXPLANATIONS OR EXTRA TEXT.

Conventional Commits Format:
<type>[optional scope]: <description>

[optional body]

[optional footer(s)]

Types: feat, fix, refactor, docs, test, chore, style, perf, build, ci
- feat: new feature
- fix: bug fix
- refactor: code restructuring without changing behavior
- docs: documentation changes
- test: adding or fixing tests
- chore: maintenance tasks
- style: code style/formatting changes
- perf: performance improvements
- build: build system changes
- ci: CI/CD changes

Guidelines:
- Title: 50 characters max, imperative mood ("Add feature" not "Added feature")
- Include scope in parentheses if changes are limited to a specific component (e.g., "feat(auth): add login validation")
- Add "!" after type/scope for breaking changes (e.g., "feat!: change API signature")
- Include body only if explanation adds value beyond the title
- Body: 72 characters per line max, explain WHAT and WHY (not how)
- Use bullet points for multiple changes or breaking changes
- For breaking changes, explain migration path in footer with "BREAKING CHANGE:" prefix
- Prioritize: breaking changes > feat > fix > refactor > others
- If multiple types, choose the most significant one
- Language: {language}

Examples:
feat: add user authentication system
- Implement JWT token validation
- Add password hashing with bcrypt

fix(ui): resolve modal close button overlap
- Adjust z-index for close button positioning

refactor(api): extract validation logic to middleware
- Move input validation to reusable middleware
- Reduce code duplication in route handlers

feat!: migrate to new database schema
- Update all models to use new schema
- Add migration scripts

BREAKING CHANGE: API endpoints now require authentication

Diff:
{diff_content}
"""
